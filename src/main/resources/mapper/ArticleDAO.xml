<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zs.campusblog.dao.ArticleDAO">
    <resultMap id="BaseResultMap" type="com.zs.campusblog.dto.ArticleDTO">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="content_html" property="contentHtml" jdbcType="VARCHAR"/>
        <result column="category_id" property="categoryId" jdbcType="INTEGER"/>
        <result column="cover_image" property="coverImage" jdbcType="VARCHAR"/>
        <result column="categoryName" property="categoryName" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="nickName" property="nickName" jdbcType="VARCHAR"/>
        <result column="tags" property="tags" jdbcType="VARCHAR"/>
        <result column="views" property="views" jdbcType="INTEGER"/>
        <result column="likes" property="likes" jdbcType="INTEGER"/>
        <result column="collections" property="collections" jdbcType="INTEGER"/>
        <result column="comment" property="comment" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="BIT"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="level" property="level" jdbcType="INTEGER"/>
        <result column="delete_status" property="deleteStatus" javaType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="getArticleList" parameterType="com.zs.campusblog.dto.ArticleQueryParam" resultMap="BaseResultMap">
        SELECT
        a.*,
        u.`username`,
        c.`name` as categoryName
        FROM
        article a
        LEFT JOIN user u ON a.`user_id` = u.`id`
        LEFT JOIN category c ON a.`category_id` = c.`id`
        <where> a.delete_status = 1
            <if test="keyword != null and title != ''">
                and (a.title like CONCAT('%',#{keyword},'%')
                OR a.content like CONCAT('%',#{keyword},'%'))
            </if>
        </where>
        ORDER BY a.create_time DESC
    </select>

    <select id="getArticleById" parameterType="integer" resultMap="BaseResultMap">
        SELECT
            a.*,
            u.username,
            u.nick_name nickName,
            al.status like_status,
            ac.status collection_status
        FROM
            article a
            LEFT JOIN USER u ON a.user_id = u.id
            LEFT JOIN article_like al on a.user_id = al.user_id AND a.id = al.article_id
            LEFT JOIN article_collection ac ON a.user_id = ac.user_id AND a.id = ac.article_id
        WHERE
            a.id = #{id}
    </select>

    <select id="getArticlesByTagId" parameterType="integer" resultType="com.zs.campusblog.dto.ArticleDTO">
        SELECT DISTINCT
            a.*,
            u.username,
            u.nick_name nickName
        FROM
            article a
            LEFT JOIN user u ON a.user_id = u.id
        WHERE
            a.id IN (
            SELECT DISTINCT
                article_id
            FROM
                article_tag
            WHERE
            tag_id = #{id}
            )
    </select>

    <select id="getArticlesByUserId" parameterType="integer" resultMap="BaseResultMap">
        SELECT
            u.id userId,
            u.username,
            u.nick_name nickName,
            a.*
        FROM
            USER u
            LEFT JOIN article a ON u.id = a.user_id
        WHERE
            u.id = #{id} AND a.delete_status = 1
            ORDER BY a.create_time DESC
    </select>

    <select id="getArticlesByCategoryId" parameterType="integer" resultMap="BaseResultMap">
        SELECT
            a.*,
            u.username,
            u.nick_name,
            c.`name` AS categoryName
        FROM
            article a
            LEFT JOIN USER u ON a.user_id = u.id
            LEFT JOIN category c ON a.category_id = c.id
        WHERE
            category_id = #{categoryId}
        ORDER BY
	        a.create_time DESC
    </select>

    <select id="getArticlesWithLevel" resultType="com.zs.campusblog.dto.ArticleDTO">
        SELECT
            a.*,
            u.username,
            u.nick_name,
            c.`name` AS categoryName
        FROM
            article a
            LEFT JOIN USER u ON a.user_id = u.id
            LEFT JOIN category c ON a.category_id = c.id
        WHERE
            LEVEL = 1
        ORDER BY
            a.create_time DESC
    </select>

    <update id="incrementLikes" parameterType="integer">
        update article set likes = likes + 1 where id = #{articleId}
    </update>

    <update id="decrementLikes" parameterType="integer">
        update article set likes = likes - 1 where id = #{articleId}
    </update>

    <update id="deleteArticleById" parameterType="integer">
        update article set delete_status = 0 where id = #{id}
    </update>

    <select id="getArticleCount" resultType="integer">
        select count(id) as articleCount from article where delete_status = 1
    </select>

</mapper>